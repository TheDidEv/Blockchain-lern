const assert = require('assert');//Assert is standard library into the Node.js. Assert is used for making assertions about tests.
const ganache = require('ganache');//for creating a local blockchain for fast Ethereum(tets network)
const { Web3 } = require('web3');
const { abi, evm } = require('../compiler');

const web3 = new Web3(ganache.provider());//instance of Web3

let accounts;
let inbox;
let INITIAL_MSG = 'Initial message in contract'

beforeEach(async () => {
    //get a list of all accounts
    //eth - etherium
    accounts = await web3.eth.getAccounts();
    // accounts = web3.eth.getAccounts().then(fethedAccounts => {
    //     console.log(fethedAccounts);//output 10 randomly generated on local network
    // });

    //Contract - constructor function, first params on Contract its our ABI(param: interface)
    //data - its bytecode our contract, arguments - we pass on constructor(on solidity code)
    //Calling deploy starts to create an object can that can then be deployed to the network.
    inbox = await new web3.eth.Contract(abi)
        .deploy({
            data: evm.bytecode.object,
            arguments: [INITIAL_MSG]
        })
        .send({ from: accounts[0], gas: '1000000' });
});

describe('Inbox', () => {
    it('deploy contract', () => {
        //console.log("Accounts: ", accounts);//output 10 randomly generated on local network
        //console.log("Inbox contract: ", inbox);//data about contract
        assert.ok(inbox.options.address);
        console.log('inbox.options.address test: ', inbox.options.address);
    });

    it('has a default message', async () => {
        const message = await inbox.methods.message().call()//call the method message(field, message method - automatically generated by your contract)
        assert.equal(message, INITIAL_MSG);
    });

    it('can change this message', async () => {
        await inbox.methods.setMessage('new msg').send({ from: accounts[0] });//set new Message value, {from:accounts[0]} - this is who pay for transaction
        const message = await inbox.methods.message().call();
        assert.equal(message, 'new msg');
        console.log("change message:", message);
    });
});








// //Test librari Mocha
// //Class for testing
// class Car {
//     park() {
//         return "stopped";
//     }

//     drive() {
//         return "drive"
//     }
// }

// //was completed before we start testing with - describe
// //was caled before every it(...) on describe
// let car;
// beforeEach(() => {
//     car = new Car;
// });
// //testing with mocha
// describe('Car class', () => {
//     //test park() method
//     it('can_park', () => {
//         assert.equal(car.park(), "stopped");//assert.equal - from standart nodejs librari - assert
//     });

//     //test drive() method
//     it('can_drive', () => {
//         assert.equal(car.drive(), "drive");
//     });
// });